// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["groupBy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS untuk Role dan Status
enum UserRole {
  CUSTOMER
  ORGANIZER
}

enum TransactionStatus {
  PENDING_PAYMENT
  PENDING_CONFIRMATION
  COMPLETED
  CANCELLED
  EXPIRED
  REJECTED
}

// MODEL UTAMA

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  phone         String?   @unique
  name          String
  password      String
  role          UserRole  @default(CUSTOMER)
  points        Int       @default(0)
  referralCode  String    @unique @default(cuid())
  referredById  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // [PENAMBAHAN] Field untuk menandai email sudah terverifikasi atau belum
  emailVerified DateTime?

  organizedEvents    Event[]             @relation("OrganizedBy")
  transactions       Transaction[]
  reviews            Review[]
  profile            Profile?
  vouchers           Voucher[]           @relation("UserVouchers")
  referredBy         User?               @relation("Referrals", fields: [referredById], references: [id])
  referrals          User[]              @relation("Referrals")
  
  // [PENAMBAHAN] Relasi ke token verifikasi dan reset password
  verificationTokens VerificationToken[]
  passwordResetTokens PasswordResetToken[]
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  avatarUrl String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id            String   @id @default(uuid())
  name          String
  slug          String   @unique
  description   String
  category      String
  location      String
  startDate     DateTime
  endDate       DateTime
  price         Float
  isFree        Boolean  @default(false)
  ticketTotal   Int
  ticketSold    Int      @default(0)
  organizerId   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  organizer    User          @relation("OrganizedBy", fields: [organizerId], references: [id])
  transactions Transaction[]
  reviews      Review[]
  vouchers     Voucher[]     @relation("EventVouchers")
}

model Transaction {
  id              String            @id @default(uuid())
  userId          String
  eventId         String
  quantity        Int
  totalPrice      Float
  finalPrice      Float
  status          TransactionStatus @default(PENDING_PAYMENT)
  pointsUsed      Int               @default(0)
  paymentProofUrl String?
  paymentDeadline DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  voucherId String?
  voucher   Voucher? @relation(fields: [voucherId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model Voucher {
  id              String   @id @default(uuid())
  code            String   @unique
  discountPercent Int
  maxDiscount     Float?
  expiresAt       DateTime
  isUsed          Boolean  @default(false)

  eventId      String?
  event        Event?   @relation("EventVouchers", fields: [eventId], references: [id])

  userId       String?
  user         User?    @relation("UserVouchers", fields: [userId], references: [id])

  transactions Transaction[]
}

// [MODEL BARU] Untuk menyimpan token verifikasi email
model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}

// [MODEL BARU] Untuk menyimpan token reset password
model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}